name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 19
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install dependencies
        working-directory: ./frontend
        run: npm install
      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm run build
          echo "La aplicaci√≥n frontend ha buildeado correctamente."

  test-backend:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      JWT_COOKIE_NAME: test
      JWT_SECRET: test-secret
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 19
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install dependencies
        run: npm install
      - name: Run Tests
        working-directory: ./backend
        run: npm test

  docker:
    needs: [build-frontend, test-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU (multi-platform)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for image tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Deploy Hook
        env:
          DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          echo "Trigger al deploy en Render con la imagen actualizada..."
          curl -X POST "${DEPLOY_HOOK}"

env:
  REGISTRY: docker.io
  IMAGE_NAME: santirubiodev/devops-tpfinal